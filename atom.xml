<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamwent</title>
  <subtitle>Lazy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamwent.cn/"/>
  <updated>2017-02-12T06:45:50.000Z</updated>
  <id>http://blog.iamwent.cn/</id>
  
  <author>
    <name>iamwent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A 计划</title>
    <link href="http://blog.iamwent.cn/2017/12/30/plan-a-of-2017/"/>
    <id>http://blog.iamwent.cn/2017/12/30/plan-a-of-2017/</id>
    <published>2017-12-30T13:22:28.000Z</published>
    <updated>2017-02-12T06:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>我不是一个爱记笔记的人，也不是一个爱总结的人。这两天吃了亏，决定对自己的知识进行总结整理，查漏补缺。把这些内容都写到 <a href="http://blog.iamwent.cn/2017/02/11/android-tips/">Android Tips</a> 一文中去吧。同时把一些常用的代码抽离出来放到 GitHub 上去。</p>
<p>另外在大前端的趋势下，入坑学习 React Native，放到 <a href="http://blog.iamwent.cn/2017/02/12/react-native-tutorial/">React Native Tutorial</a> 一文中去。</p>
<p>最后，我虽然去年大略学习了 iOS 开发，但是是基于 Swift 的，这部分内容放到最后再来深入学习吧。</p>
<a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不是一个爱记笔记的人，也不是一个爱总结的人。这两天吃了亏，决定对自己的知识进行总结整理，查漏补缺。把这些内容都写到 &lt;a href=&quot;http://blog.iamwent.cn/2017/02/11/android-tips/&quot;&gt;Android Tips&lt;/a&gt; 一文中去吧。同时把一些常用的代码抽离出来放到 GitHub 上去。&lt;/p&gt;
&lt;p&gt;另外在大前端的趋势下，入坑学习 React Native，放到 &lt;a href=&quot;http://blog.iamwent.cn/2017/02/12/react-native-tutorial/&quot;&gt;React Native Tutorial&lt;/a&gt; 一文中去。&lt;/p&gt;
&lt;p&gt;最后，我虽然去年大略学习了 iOS 开发，但是是基于 Swift 的，这部分内容放到最后再来深入学习吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.iamwent.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android using JavaScript in WebView</title>
    <link href="http://blog.iamwent.cn/2017/02/21/android-using-javascript-in-webView/"/>
    <id>http://blog.iamwent.cn/2017/02/21/android-using-javascript-in-webView/</id>
    <published>2017-02-21T10:58:29.000Z</published>
    <updated>2017-02-21T13:20:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 Android 开发中，有时候需要 native 和 HTML5 页面进行交互，有两种方式：其一是给 WebView 添加 Javascript 回调接口，一种是拦截 WebView 的 url 从而达到交互的目的。</p>
<h2 id="Enabling-JavaScript"><a href="#Enabling-JavaScript" class="headerlink" title="Enabling JavaScript"></a>Enabling JavaScript</h2><p>WebView 默认是禁用 JavaScript 的，所以要打开这项设置才能与之交互，方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Javascript-invoke-Java"><a href="#Javascript-invoke-Java" class="headerlink" title="Javascript invoke Java"></a>Javascript invoke Java</h2><p>假设我们现在要实现一个小功能：JavaScript 调用本地代码关掉当前 Activity，怎么做呢？</p>
<p>WebView 设置 JavaScript 接口使用的是方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.addJavascriptInterface(Object object, String name)</div></pre></td></tr></table></figure>
<p>第一个参数就是接口类，第二个参数是将这个接口对象插入到 JavaScript 上下文中时对应的名字，JavaScript 就是通过这个名字来调用接口中的方法的。</p>
<p>首先我们来定义这个接口类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.webkit.JavascriptInterface;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by iamwent on 21/02/2017.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> iamwent</div><div class="line"> * <span class="doctag">@since</span> 21/02/2017</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSCallback</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// avoid memory leak</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;Activity&gt; weak;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JSCallback</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        weak = <span class="keyword">new</span> WeakReference&lt;&gt;(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!weak.get().isDestroyed()) &#123;</div><div class="line">            weak.get().finish();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>需要注意的是，出于安全性考虑，在 API 17 及以上，被 <code>@JavascriptInterface</code> 注解的方法才能被调用</p>
</blockquote>
<p>然后我们在 WebView 中加载这个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JSCallback(HomeActivity.<span class="keyword">this</span>), <span class="string">"native"</span>);</div></pre></td></tr></table></figure>
<p>在 JavaScript 中的调用就很简单了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.native.finish()</div></pre></td></tr></table></figure>
<p>window 是 JavaScript 默认的一个全局对象，native 是我们传递进去的名字，你也可以改成其他的。</p>
<blockquote>
<p>为了避免内存泄漏，我们可以在合适的位置（如：<code>onDestroy()</code>）调用以下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webView.removeJavascriptInterface(<span class="string">"native"</span>);</div></pre></td></tr></table></figure>
</blockquote>
<p>另外一种方式呢，就是 native 拦截 webview 的 url，方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">webView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, WebResourceRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request.getUrl().getScheme().equals(<span class="string">"native"</span>)) &#123;</div><div class="line">            <span class="comment">// todo</span></div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.shouldOverrideUrlLoading(view, request);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Java-invoke-JavaScript"><a href="#Java-invoke-JavaScript" class="headerlink" title="Java invoke JavaScript"></a>Java invoke JavaScript</h2><p>native 调用 JavaScript 也有两种方式，其一是使用 <code>webView.loadUrl(&quot;javascript:method(params)</code>，method 是定义在 JavaScript 中的函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 没有返回值，需要 JavaScript 再调用 native 方法</span></div><div class="line">webView.loadUrl(<span class="string">"javascript:todo()"</span>);</div></pre></td></tr></table></figure>
<p>在 Android 4.4 及其以上版本中， WebView 中提供了一个叫做 <code>evaluateJavascript()</code> 的方法，可以用来异步执行 JavaScript 代码，并且这个方法需要在主线程中调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在主线程中调用，异步执行</span></div><div class="line">String script = <span class="string">""</span>;</div><div class="line">webView.evaluateJavascript(script, <span class="keyword">new</span> ValueCallback&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveValue</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        <span class="comment">// todo</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>demo 就不写了，很简单的啦。</p>
</blockquote>
<h2 id="Reading-More"><a href="#Reading-More" class="headerlink" title="Reading More"></a>Reading More</h2><ul>
<li><a href="https://developer.android.com/guide/webapps/webview.html" target="_blank" rel="external">Building Web Apps in WebView | Android Developers</a></li>
<li><a href="https://mthli.github.io/Android-WebView-JavaScript" target="_blank" rel="external">Android WebView 与 JavaScript 交互</a></li>
<li><a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/" target="_blank" rel="external">Android 中 Java 和 JavaScript 交互</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Android 开发中，有时候需要 native 和 HTML5 页面进行交互，有两种方式：其一是给 WebView 添加 Javascript 回调接口，一种是拦截 WebView 的 url 从而达到交互的目的。&lt;/p&gt;
&lt;h2 id=&quot;Enabling-JavaScript&quot;&gt;&lt;a href=&quot;#Enabling-JavaScript&quot; class=&quot;headerlink&quot; title=&quot;Enabling JavaScript&quot;&gt;&lt;/a&gt;Enabling JavaScript&lt;/h2&gt;&lt;p&gt;WebView 默认是禁用 JavaScript 的，所以要打开这项设置才能与之交互，方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;webView.getSettings().setJavaScriptEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android, javascript, webView" scheme="http://blog.iamwent.cn/tags/android-javascript-webView/"/>
    
  </entry>
  
  <entry>
    <title>React Native Tutorial</title>
    <link href="http://blog.iamwent.cn/2017/02/12/react-native-tutorial/"/>
    <id>http://blog.iamwent.cn/2017/02/12/react-native-tutorial/</id>
    <published>2017-02-12T05:24:41.000Z</published>
    <updated>2017-02-12T13:17:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了一点点时间学习了 JavaScript，入坑 React Native。</p>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>有两个非常好的教程：</p>
<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="external">廖雪峰老师的 JavaScript 教程</a></li>
<li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">阮一峰老师的 ECMAScript 6 入门</a></li>
</ul>
<a id="more"></a>
<h2 id="React-amp-JSX"><a href="#React-amp-JSX" class="headerlink" title="React &amp; JSX"></a>React &amp; JSX</h2><p>React Native 是构建在 React 和 JSX 之上的，再加上相关平台的知识，就能开发 Native 应用和 Web 应用啦。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-185998322a6685b4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="React Native 设计思路"></p>
<h2 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h2><ul>
<li>按照官网搭建开发环境</li>
<li>使用 WebStorm 开发</li>
</ul>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://f8-app.liaohuqiu.net/" target="_blank" rel="external">构建 F8 App / React Native 开发指南</a></li>
<li><a href="https://github.com/vczero/react-native-lesson" target="_blank" rel="external">React Native 入门指南</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;花了一点点时间学习了 JavaScript，入坑 React Native。&lt;/p&gt;
&lt;h2 id=&quot;JavaScript&quot;&gt;&lt;a href=&quot;#JavaScript&quot; class=&quot;headerlink&quot; title=&quot;JavaScript&quot;&gt;&lt;/a&gt;JavaScript&lt;/h2&gt;&lt;p&gt;有两个非常好的教程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000&quot;&gt;廖雪峰老师的 JavaScript 教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;阮一峰老师的 ECMAScript 6 入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="react native" scheme="http://blog.iamwent.cn/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>Android Tips</title>
    <link href="http://blog.iamwent.cn/2017/02/11/android-tips/"/>
    <id>http://blog.iamwent.cn/2017/02/11/android-tips/</id>
    <published>2017-02-11T06:28:01.000Z</published>
    <updated>2017-02-14T00:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<p>对此，我先稍微分下类：</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>四大组件技巧</li>
<li>常用组件技巧</li>
</ul>
<h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><ul>
<li>自定义 View</li>
<li>事件分发</li>
<li>View 绘制流程</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul>
<li>http/https 协议</li>
<li>常用网络框架</li>
</ul>
<h2 id="线程／进程"><a href="#线程／进程" class="headerlink" title="线程／进程"></a>线程／进程</h2><ul>
<li>消息机制</li>
<li>线程同步</li>
<li>IPC</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>内存优化</li>
<li>过度绘制</li>
<li>网络优化</li>
<li>冷启动优化</li>
<li>电池优化</li>
</ul>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul>
<li>多线程下的数据库访问</li>
</ul>
<h2 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h2><ul>
<li>四大组件工作原理</li>
</ul>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul>
<li>常用测试框架</li>
</ul>
<h2 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h2><ul>
<li>Retrofit</li>
<li>OkHttp</li>
<li>RxJava</li>
<li>Gson</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;对此，我先稍微分下类：&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;四大组件技巧&lt;/li&gt;
&lt;li&gt;常用组件技巧&lt;/li&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android 沉浸栏实践——踩坑</title>
    <link href="http://blog.iamwent.cn/2016/08/27/android-status-bar-tinter/"/>
    <id>http://blog.iamwent.cn/2016/08/27/android-status-bar-tinter/</id>
    <published>2016-08-26T16:54:04.000Z</published>
    <updated>2017-02-06T04:26:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>当前开发环境：Android Studio 2.1.3，compileSdkVersion 24，buildToolsVersion “24.0.2”，support:appcompat-v7:24.2.0</p>
</blockquote>
<p>首先放个图，这就是我要做成的效果，Toolbar 和 Status Bar 一体共用背景图，实际上就是 Toolbar 的背景图延伸到 Status Bar。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-54839f916d2b44e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p>
<a id="more"></a>
<p>先做一点点思考。我不打算修改 toolbar 的高度，设置为 <code>android:layout_height=&quot;?attr/actionBarSize&quot;</code> 就好，否则 <code>fitsSystemWindows</code> 之后就需要设置 toolbar 高度为 25dp ＋ 48dp ＝ 73dp，同时其他的内容也会改变。那么，可以考虑在 <code>AppBarLayout</code> 中设置背景，然后让它侵入到状态栏去。现在 <code>style.xml</code> 看起来会是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- values/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/BaseAppTheme"</span>/&gt;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BaseAppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- values-v19/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/BaseAppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- values-v21/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"@style/BaseAppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.NoActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>toolbar 的布局文件差不多是这样子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- layout/toolbar.xml ---&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/appbar_top_padding"</span></div><div class="line">    <span class="attr">android:background</span>=<span class="string">"@drawable/bg_bar"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme.AppBarOverlay"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">        <span class="attr">app:popupTheme</span>=<span class="string">"@style/AppTheme.PopupOverlay"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>主布局文件差不多是这样子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- layout/activity_main.xml ---&gt;</span></div><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/root"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.iamwent.tinter.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/toolbar"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/tv_sdk"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:padding</span>=<span class="string">"16dp"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后你运行，发现 v21 的效果出来了，但是 v19 是这么个鬼！<br><img src="http://upload-images.jianshu.io/upload_images/42817-8efa0310ea90f391.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="v19效果"></p>
<p>那个灰色条是什么？又是怎么来的呢？给跟布局设置背景色就可以发现，灰色条实际上是因为根布局侵入了状态栏，从我们给根布局设置的 <code>android:fitsSystemWindows=&quot;true&quot;</code> 就是让布局上去</p>
<p>对于 <code>android:windowTranslucentStatus</code><a href="https://developer.android.com/about/versions/android-4.4.html#UI" target="_blank" rel="external">文档上是这么说的：</a></p>
<blockquote>
<p>By enabling translucent system bars, your layout will fill the area behind the system bars, so you must also enable <a href="https://developer.android.com/reference/android/R.attr.html#fitsSystemWindows" target="_blank" rel="external">fitsSystemWindows</a><br> for the portion of your layout that should not be covered by the system bars.<br>开启透明状态栏后，你的布局会填充状态栏下面的区域，所以你应当同时设置布局 fitsSystemWindows 以防止被状态栏覆盖。</p>
</blockquote>
<p>而对于 <code>android:fitsSystemWindows</code> 文档又是这么说的：</p>
<blockquote>
<p>Boolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a <a href="http://stackoverflow.com/questions/25874412/what-is-a-non-embedded-activity-and-why-doesnt-androidfitssystemwindows-work-i" target="_blank" rel="external">non-embedded activity</a>.<br>配置 fitsSystemWindows 后，系统就会调整 view 的 padding 以给 system windows 留出空间。</p>
</blockquote>
<p>解决办法是根布局不设置 <code>android:fitsSystemWindows</code>，然后在代码中判断，在 v21 以上手动设置这一属性，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTranslucentStatusBar</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sdkInt = Build.VERSION.SDK_INT;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sdkInt &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">        setTranslucentStatusBarLollipop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.LOLLIPOP)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTranslucentStatusBarLollipop</span><span class="params">()</span> </span>&#123;</div><div class="line">    ((ViewGroup) getWindow().findViewById(android.R.id.content)).getChildAt(<span class="number">0</span>).setFitsSystemWindows(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>昨晚吐槽的时候，有位朋友提醒了我，这个值也可以用 <code>style</code> 的方式设置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- values/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.FitsSystemWindows"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- values-v21/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme.FitsSystemWindows"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:fitsSystemWindows"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我脑袋一抽，觉得以下这个方式可能也可以：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- values/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">"fit_system_status_bar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- values-v21/style.xml ---&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bool</span> <span class="attr">name</span>=<span class="string">"fit_system_status_bar"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="坑位零"><a href="#坑位零" class="headerlink" title="坑位零"></a>坑位零</h2><p>在上面的配置中涉及到了多个属性的设置，建议修改为不同的值，看看它们会造成什么样的效果。</p>
<ul>
<li><a href="https://developer.android.com/reference/android/R.attr.html#windowDrawsSystemBarBackgrounds" target="_blank" rel="external">android:windowDrawsSystemBarBackgrounds</a></li>
<li>android:statusBarColor</li>
<li>android:windowDrawsSystemBarBackgrounds</li>
</ul>
<h2 id="坑位一"><a href="#坑位一" class="headerlink" title="坑位一"></a>坑位一</h2><p><img src="http://upload-images.jianshu.io/upload_images/42817-dad2d3b4ac67bfaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="奇怪的间隔"></p>
<p>眼尖的人可能在最前面的效果图就看到了，那就是在 v23 上这个显示系统版本的 TextView 有一个奇怪的 margin，而且很巧合的就是 25dp！最后我发现，是由于给主布局的 RelativeLayout 设置了 <code>app:layout_behavior=&quot;@string/appbar_scrolling_view_behavior&quot;</code> 造成的。解决办法是在 v23 上给 RelativeLayout 设置 <code>android:layout_marginTop=&quot;-25dp&quot;</code>，可以在 dimens 中做。</p>
<h2 id="坑位二"><a href="#坑位二" class="headerlink" title="坑位二"></a>坑位二</h2><p>在修改的过程中我还发现一个奇怪的问题，status bar 是个灰色的条，超级奇怪！最后对比发现是 <code>AppTheme.NoActionBar</code> 采用继承 <code>Theme.AppCompat.Light.NoActionBar</code> 的方式，解决办法是不继承 parent，采用手动配置。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-5702ec362f11feee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Theme 造成的怪现象"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我是要给一个半成品的 APP 做适配，所以先单独做了一个 demo 实现想要的——后来踩到的坑证明我这个决定是多么的正确！特别是坑位三。所以一旦出现莫名其妙的错误，我就对照 demo 的配置一个个地方去排除。<br>另外，多试试各种配置的作用，明白它们影响的是什么区域，碰到问题才好修改。</p>
<p><a href="https://github.com/iamwent/Tinter" target="_blank" rel="external">Demo 在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当前开发环境：Android Studio 2.1.3，compileSdkVersion 24，buildToolsVersion “24.0.2”，support:appcompat-v7:24.2.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先放个图，这就是我要做成的效果，Toolbar 和 Status Bar 一体共用背景图，实际上就是 Toolbar 的背景图延伸到 Status Bar。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/42817-54839f916d2b44e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;效果图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://blog.iamwent.cn/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>买书如山倒，读书如抽丝</title>
    <link href="http://blog.iamwent.cn/2016/03/15/a-lazy-man-always-buy-books/"/>
    <id>http://blog.iamwent.cn/2016/03/15/a-lazy-man-always-buy-books/</id>
    <published>2016-03-15T11:06:01.000Z</published>
    <updated>2017-02-06T04:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢<strong>向老师</strong>组织的新春读书活动，没有这么一群志同道合的人真的很难说坚持下来。这一个月的读书过程中我有几天读代码读文档读到整个人都很燥，一度想放弃，没想到还是坚持下来了。</p>
<ul>
<li>一九八四</li>
<li>哲学家们都干了些什么</li>
<li>阿弥陀佛么么哒</li>
<li>大败局 Ⅰ、Ⅱ</li>
<li>我的凉山兄弟</li>
<li>公正</li>
<li>技术元素</li>
</ul>
<a id="more"></a>
<p><img src="https://img1.doubanio.com/mpic/s26039107.jpg" alt="一九八四"></p>
<blockquote>
<p>豆瓣读书：作品刻画了人类在极权主义社会的生存状态，有若一个永不褪色的警示标签，警醒世人提防这种预想中的黑暗成为现实。历经几十年，其生命力益显强大，被誉为“二十世纪影响最为深远的文学经典”之一。</p>
</blockquote>
<p>《一九八四》是一部很值得看的书。阅读此书时，你一定会对书中所描写的极权社会感到恐惧，仿佛你的身后就有思想警察注视着你，而那三句著名的口号则一直萦绕在你的耳畔：战争就是和平，自由就是奴役，无知就是力量。</p>
<p>梁文道在『一千零一夜』这档节目中提及此书时，说到：我们的社交网络就是一个一九八四的社会，其他人扮演思想警察，我们将信息发布在网络上，由思想警察监控。</p>
<p>我觉得梁文道在这里说的比较含蓄了。</p>
<p><img src="https://img1.doubanio.com/mpic/s6507717.jpg" alt="哲学家们都干了些什么？"></p>
<p>这本书号称是作者十余年兴趣阅读后的一次厚积薄发，我认为言过其实。这本书对西方哲学史泛泛而谈，从苏格拉底到康德到尼采，介绍了各种哲学理论却又统统否定，到最后都没有真正回答作者自己在序言中提出的两个问题：人生的意义是什么？我如何才能获得最大的幸福？差评。</p>
<p><img src="https://img3.doubanio.com/mpic/s28259771.jpg" alt="阿弥陀佛么么哒"></p>
<p>大冰自称这些故事与风花雪月无关，与鸡汤小清新无关，其实全都是鸡汤。为了给它一个完整的『读过』的标签，还是耐着性子看完了。</p>
<p>唯一一点收获就是思考一个问题：如何对待朋友？</p>
<p><img src="https://img3.doubanio.com/mpic/s6639656.jpg" alt="大败局Ⅰ"></p>
<blockquote>
<p>这不是一本阐述原理和发现真理的书，它仅仅是记载了一些著名的灾难，希望后来的人们能够从这些崩塌了的”帝国”废墟中寻找到重新出发的起点、勇气和免蹈覆辙的启示。</p>
</blockquote>
<p>我从这两本书中各获得一个思考的问题：市场规则和企业的道德，政商之道。</p>
<p>推荐阅读《浪潮之巅》。</p>
<p><img src="https://img3.doubanio.com/mpic/s28268526.jpg" alt="我的凉山兄弟"></p>
<p>作者考察了四川凉山地区诺苏社群，探究诺苏人为何在时代剧变中陷入了艾滋病和毒品的泥沼中。毒品和艾滋并又对诺苏的社群结构、传统文化造成了怎样的冲击？诺苏的禁毒运动和艾滋病防治运动为何大都草草收场？读读这本书，思考我们身处的这个社会。</p>
<p>坑爹的是，这是一本学术著作！所以读起来不是很畅快，怪我咯。</p>
<p>推荐阅读《天空的另一半》。作者描述了亚非拉国家的性别歧视、性暴力、厌女价值观、家庭暴力、处女情结等现象，向我们展示了女性的生存困境，整个世界对此困境的态度，以及女性身上自我觉醒的力量。她们将绝望化为希望，勇敢争取生命尊严。</p>
<p><img src="https://img1.doubanio.com/mpic/s4604609.jpg" alt="公正：该如何做是好"></p>
<blockquote>
<p>豆瓣上最热门的评论：公义不仅是探讨如何正确地分配事物，也是该如何正确地看待和评价事物。简言之，通往公义之路的三个条件就是：最大化福利，尊重个体自由，追求美好品德。</p>
</blockquote>
<p>桑德尔在这本书中讨论了三种考量公正的角度：福利，自由和德性。桑德尔深入的分析了每一种考量角度的主要理论支持及其困境，发人深省。同时这也是一门著名的公开课，网易上有。</p>
<p><img src="https://img3.doubanio.com/mpic/s9042055.jpg" alt="技术元素"></p>
<blockquote>
<p>我会将我不成熟的想法、笔记、内心争论、草稿以及对其他文章的回应都写在《技术元素》中，这样我就能知道自己到底在想些什么。—— KK</p>
<p>“技术元素”（technium)是凯文•凯利专门创造出来的词语。“技术元素不仅仅包括一些具象的技术（例如汽车、雷达和计算机等），它还包括文化、 法律、社会机构和所有的智能创造物。”简而言之，技术元素就是从人的意识中涌现出来的一切。KK 把这种科技的延伸面看成一个能产生自我动 力的整体。</p>
</blockquote>
<p>阅读这本书的时候，正值 AlphaGo 大战李世乭。我押李世乭，因为我觉得目前的技术还没有达到这种高度。然而 AlphaGo 打了我的脸。</p>
<p>这本书还没看完。目前最深刻的一句话是：技术元素能够促进技术元素的发展。具体的说就是 AlphaGo 能促进 AlphaGo 的发展。</p>
<p>技术力量是社会发展的巨大推力，但也需要法律法规来规范，文化、艺术和教育的力量来引导人们走向真善美。</p>
<p>最后给大家推荐一部纪录片，Home，研究地球的外星人必看。<br><img src="https://img1.doubanio.com/view/movie_poster_cover/spst/public/p835650453.jpg" alt="家园/Home"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢&lt;strong&gt;向老师&lt;/strong&gt;组织的新春读书活动，没有这么一群志同道合的人真的很难说坚持下来。这一个月的读书过程中我有几天读代码读文档读到整个人都很燥，一度想放弃，没想到还是坚持下来了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一九八四&lt;/li&gt;
&lt;li&gt;哲学家们都干了些什么&lt;/li&gt;
&lt;li&gt;阿弥陀佛么么哒&lt;/li&gt;
&lt;li&gt;大败局 Ⅰ、Ⅱ&lt;/li&gt;
&lt;li&gt;我的凉山兄弟&lt;/li&gt;
&lt;li&gt;公正&lt;/li&gt;
&lt;li&gt;技术元素&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="readding" scheme="http://blog.iamwent.cn/tags/readding/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2 Step to Step</title>
    <link href="http://blog.iamwent.cn/2016/03/09/dagger2-step-to-step/"/>
    <id>http://blog.iamwent.cn/2016/03/09/dagger2-step-to-step/</id>
    <published>2016-03-09T10:07:13.000Z</published>
    <updated>2017-02-06T04:03:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>假设你已经了解 <a href="http://www.devtf.cn/?p=1248" target="_blank" rel="external"><strong>依赖注入</strong></a> 这一概念，只是在如何使用 Dagger 时遇到了一些困扰，因为 Dagger 其实是一个上手难度颇高的库。我试图通过这篇文章解决如何上手这一问题。</p>
</blockquote>
<p>目前 Dagger 有两个分支，一个由 <a href="https://github.com/square/dagger" target="_blank" rel="external">Square</a> 维护，一个为 Google 在前者的基础上开出的分支，即 <a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger 2</a> 。关于二者的比较，<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">点击此处</a> 。</p>
<p>本文写作过程中参考了不少优秀的 Dagger 文章，列在文章末尾。</p>
<p><strong>在此一并感谢他们的工作！</strong></p>
<a id="more"></a>
<h2 id="Dagger"><a href="#Dagger" class="headerlink" title="Dagger"></a>Dagger</h2><p>在引入 Dagger 之前，我们需要了解一些基础概念。Dagger 主要分三块：</p>
<ul>
<li><strong>@Inject</strong>：需要注入依赖的地方，Dagger 会构造一个该类的实例并满足它所需要的依赖；</li>
<li><strong>@Module</strong>：依赖的提供者，Module 类中的方法专门提供依赖，并用 <strong>@Provides</strong> 注解标记；</li>
<li><strong>@Component</strong>：依赖的注入者，是 <strong>@Inject</strong> 和 <strong>@Module</strong> 的桥梁，它从 <strong>@Module</strong> 中获取依赖并注入给 <strong>@Inject</strong>。</li>
</ul>
<p>对于以上关系，一句话解释就是：<strong>模块（Module）负责提供依赖，组件（Component）负责注入依赖。</strong></p>
<h2 id="Sourcecode"><a href="#Sourcecode" class="headerlink" title="Sourcecode"></a>Sourcecode</h2><p>源码放在 Github: <a href="https://github.com/iamwent/DaggerDemo" target="_blank" rel="external">DaggerDemo</a></p>
<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><ol>
<li><p>project/build.gradle</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>project/app/build.gradle</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.neenbedankt.android-apt'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//Required by Dagger2</span></div><div class="line">    apt <span class="string">'com.google.dagger:dagger-compiler:2.0.2'</span></div><div class="line">    compile <span class="string">'com.google.dagger:dagger:2.0.2'</span></div><div class="line">    <span class="comment">// Dagger 2 中会用到 @Generated 注解，而 Android SDK 中没有 javax.anotation.Generated.class，所以在 Android 项目要添加此句</span></div><div class="line">    provided <span class="string">'org.glassfish:javax.annotation:10.0-b28'</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Demo 实现一个简单的 <code>ListView</code> 显示字符串列表</p>
<ol>
<li>创建 <code>UserAdapter</code> 类，并在构造函数前添加 <strong>@Inject</strong> 注解。这样，Dagger 就会在需要获取 <code>UserAdapter</code> 对象时，调用这个被标记的构造函数，从而生成一个 <code>UserAdapter</code> 对象。 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> LayoutInflater inflater;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; users;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAdapter</span><span class="params">(Context ctx, List&lt;String&gt; users)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.inflater = LayoutInflater.from(ctx);</div><div class="line">        <span class="keyword">this</span>.users = users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>需要注意的是：如果构造函数含有参数，Dagger 会在调用构造对象的时候先去获取这些参数(不然谁来传参？)，所以你要保证它的参数也提供可被 Dagger 调用到的生成函数。Dagger 可调用的对象生成方式有两种：一种是用 **@Inject** 修饰的构造函数，上面就是这种方式。另外一种是用 **@Provides** 修饰的函数，下面会讲到。[参考：Dagger 源码解析](http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)
</code></pre><ol>
<li><p>构建 Module，提供 Context 和 List<string> 依赖，如此， Dagger 生成 UserAdapter 时所需要的依赖就从这里获取。</string></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function">Context <span class="title">provideActivityContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function">List&lt;String&gt; <span class="title">provideUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(COUNT);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</div><div class="line">            users.add(<span class="string">"item "</span> + i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>@ActivityScope</strong> 是一个自定义的范围注解，作用是允许对象被记录在正确的组件中，当然这些对象的生命周期应该遵循 Activity 的生命周期。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.inject.Scope;</div><div class="line"></div><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>构建 Component，负责注入依赖</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;UserModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>注意</strong>：这里必须是真正消耗依赖的类型 <code>MainActivity</code>，而不可以写成其父类，比如   <code>Activity</code> ，否则会导致注入失败。(<a href="http://codethink.me/2015/08/06/dependency-injection-with-dagger-2/" target="_blank" rel="external">参考：使用Dagger 2进行依赖注入</a>)</p>
</li>
<li><p>完成依赖注入</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    UserAdapter adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">// 完成注入</span></div><div class="line">        DaggerUserComponent.builder()</div><div class="line">            .userModule(<span class="keyword">new</span> UserModule(<span class="keyword">this</span>))</div><div class="line">            .build()</div><div class="line">            .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        listView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>如果找不到 <code>DaggerUserComponent</code> 类，你需要先编译一下整个项目。</strong>这是因为 Dagger 是在编译时生成必要的元素，编译时 Dagger 会处理我们的注解，为 @Components 生成实现并命名为 <code>Dagger$${YouComponentClassName}</code>，如 <code>UserComponent</code> -&gt; <code>DaggerUserComponent</code> 。你可以在 <code>app/build/generated/source/apt</code> 下找到相关的类。</p>
<p> 实际上，调用 inject 方法最终调用的是以下这样一段代码，更多细节可以查看源码。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">  &#125;</div><div class="line">  supertypeInjector.injectMembers(instance);</div><div class="line">  instance.adapter = adapterProvider.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Dagger-too"><a href="#Dagger-too" class="headerlink" title="Dagger too"></a>Dagger too</h2><ol>
<li><p>@Inject 和 @Provide 两种依赖生成方式的区别：</p>
<ul>
<li>@Inject 用于注入可实例化的类，@Provides 可用于注入所有类</li>
<li>@Inject 可用于修饰属性和构造函数，可用于任何非 Module 类，@Provides 只可用于用于修饰非构造函数，并且该函数必须在某个Module内部</li>
<li>@Inject 修饰的函数只能是构造函数，@Provides 修饰的函数必须以 provide 开头</li>
</ul>
</li>
<li><p>Dagger 的其他注解：</p>
<ul>
<li><strong>@Scope</strong>： Dagger 可以通过自定义注解限定注解作用域，参考前面的 <strong>@ActivityScope</strong>。</li>
<li><strong>@Qualifier</strong>：限定符，当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解来区分。例如：在 Android 中，我们会需要不同类型的 Context，所以我们可以定义 @Qualifier 注解 <code>@ForApplication</code> 和 <code>@ForActivity</code>，这样当注入一个 Context 的时候，我们就可以告诉  Dagger 我们想要哪种类型的 Context。</li>
<li><strong>@Singleton</strong>：单例模式，依赖的对象只会被初始化一次</li>
</ul>
</li>
<li><p>Dagger 的实际应用：本例只是一个上手教程，辅助理解 Dagger 的原理及使用方式，具体的项目应用可以参考 Reference 中第 3 条的 <a href="https://github.com/saulmm/Avengers" target="_blank" rel="external">Avengers 的源码</a> 。</p>
</li>
</ol>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p>Google 最近新开了一个 repo：<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger_fixProguard" target="_blank" rel="external">android-architecture</a>，不仅有多种架构方案，还有完整的测试，是非常好的学习项目。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger 2 Official Documentation</a></li>
<li><a href="http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/" target="_blank" rel="external">Tasting Dagger 2 on Android</a>，中文：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">详解 Dagger 2</a></li>
<li><a href="http://saulmm.github.io/when-Thor-and-Hulk-meet-dagger2-rxjava-1" target="_blank" rel="external">When the Avengers meet Dagger2, RxJava and Retrofit in a clean way</a>，中文：<a href="http://www.devtf.cn/?p=565" target="_blank" rel="external">当复仇者联盟遇上 Dragger2、RxJava 和 Retrofit 的巧妙结合</a></li>
<li><a href="http://codethink.me/2015/08/06/dependency-injection-with-dagger-2/" target="_blank" rel="external">使用 Dagger 2 进行依赖注入</a></li>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Dagger 源码解析</a> (PS: 这是 Dagger 1，但是很有参考价值)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假设你已经了解 &lt;a href=&quot;http://www.devtf.cn/?p=1248&quot;&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/a&gt; 这一概念，只是在如何使用 Dagger 时遇到了一些困扰，因为 Dagger 其实是一个上手难度颇高的库。我试图通过这篇文章解决如何上手这一问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;目前 Dagger 有两个分支，一个由 &lt;a href=&quot;https://github.com/square/dagger&quot;&gt;Square&lt;/a&gt; 维护，一个为 Google 在前者的基础上开出的分支，即 &lt;a href=&quot;https://github.com/google/dagger&quot;&gt;Dagger 2&lt;/a&gt; 。关于二者的比较，&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html&quot;&gt;点击此处&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;本文写作过程中参考了不少优秀的 Dagger 文章，列在文章末尾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在此一并感谢他们的工作！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="dagger" scheme="http://blog.iamwent.cn/tags/dagger/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio for Experts：Edit &amp; Debug &amp; Test</title>
    <link href="http://blog.iamwent.cn/2015/11/26/android-studio-for-experts/"/>
    <id>http://blog.iamwent.cn/2015/11/26/android-studio-for-experts/</id>
    <published>2015-11-26T00:31:30.000Z</published>
    <updated>2017-02-06T03:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>冒死总结！有些地方不知道怎么描述，自己动手感受一番吧。</p>
<p><del>我只总结了前面五分多钟讲的快捷方式。后面的高级技巧我还在学习中，坑慢慢填。</del></p>
<p>已将 Tor Norbye 演讲的编辑技巧补充完。</p>
<p>再来一波更新~duang~还有最后的 NDK 调试和 CPU 优化调试没总结，有空再说，囧</p>
<p>补充一点：我的测试环境是 win7 + as 1.5，有错误的地方还请指出，谢谢。</p>
</blockquote>
<p>昨天<a href="http://weibo.com/2491729875/D5vFEdvuC" target="_blank" rel="external">@陈启超同学</a>发了 Android Studio for Experts (Android Dev Summit 2015) 的视频，我也跟着学习了一下。这个视频讲的非常好！做点小结，分享交流。</p>
<a id="more"></a>
<h2 id="Completion"><a href="#Completion" class="headerlink" title="Completion"></a>Completion</h2><ol>
<li><p>使用 Tab 补全，会自动编辑光标之后的字符串，如下，你在光标处键入 c 然后选择 <code>contentEquals</code> 然后回车，magic！<br><img src="http://upload-images.jianshu.io/upload_images/42817-7bdb7da5530aba28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c.png"></p>
</li>
<li><p>使用 ctrl + shift + space 智能补全，比如下图，按下组合键，magic！可以按两次哦！<br><img src="http://upload-images.jianshu.io/upload_images/42817-7552ac90d17d7ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c2.png"></p>
</li>
<li><p>补充一个，尝试在编辑器中输入：<code>new Bitmap().var</code></p>
</li>
</ol>
<h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><ol>
<li><p>ctrl+ w 选中，继续操作会扩大选中范围，相反的操作是 ctrl + shift + w</p>
</li>
<li><p>选中后可以使用 Extra 快捷键重构为变量、方法等，这个可以在 Refactor -&gt; Extra 下看到。<br>ctrl+ alt+ v：变量<br>ctrl+ alt+ c：常量<br>ctrl+ alt+ f：域值<br>ctrl+ alt+ p：参数<br>ctrl+ alt+ m：方法</p>
</li>
<li><p>这里我有一个快捷键没有听出来，就是从构造函数提取 parameters 为 fields，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Init</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Init</span><span class="params">(String first, <span class="keyword">boolean</span> second, <span class="keyword">int</span> third)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>感谢评论区的 <a href="http://www.jianshu.com/users/920f759288e8" target="_blank" rel="external">@Will92Wang</a> 指出，这个快捷键就是 alt + enter ，这是一个很强大的组合键。<br><img src="http://upload-images.jianshu.io/upload_images/42817-032c360388617932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c.png"> </p>
<h2 id="LiveTemplates"><a href="#LiveTemplates" class="headerlink" title="LiveTemplates"></a>LiveTemplates</h2><p>这个内容极度丰富，<a href="http://weibo.com/1954362070/CwG3L1woG" target="_blank" rel="external">我以前发过微博</a>，可以在 <strong>Setting -&gt; Editor -&gt; Live Templates</strong> 下查看。举几个例子：</p>
<ol>
<li><p><code>fori</code> 和 <code>foreach</code>，在需要使用 <code>for</code> 循环时，尝试输入这两种 <code>for</code> 试试；</p>
</li>
<li><p>你还可以在数据集合变量后输入 <code>.for</code>，例如 <code>list.for</code> ，这时候你看一下补全，会列出三种 <code>for</code> 循环形式让你选择；</p>
</li>
<li><p><code>logt</code>, <code>logd</code>, <code>logm</code>，在方法外输入 <code>logt</code>，在方法内输入 <code>logd</code> 试试；</p>
</li>
<li><p>另外还有 <code>fbc</code>, <code>gone</code>, <code>iter</code> 等等，感兴趣的话可以在 <strong>Setting -&gt; Editor -&gt; Live Templates</strong> 下看看。</p>
</li>
</ol>
<hr>
<p>接下来可以说是牛哄哄的技巧了，同时也说明 Android Studio 真是强大！</p>
<h2 id="Replace-Structurally"><a href="#Replace-Structurally" class="headerlink" title="Replace Structurally"></a>Replace Structurally</h2><p>这里就不得不贴上很多代码了。比如以下资源文件，现在你想去掉所有的 <code>translation_description</code> ，技巧是使用 双击 shift 或者 ctrl + shift + a 调出搜索框然后搜索并选择 replace structurally ，编辑规则，选择 find，然后就可以十分便捷的批量修改了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"a_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"s_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"d_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"f_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-9a5217b56fedbcd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rs.png"></p>
<p>另外你还可以把这个加入设置中，由编辑器自动检查，不符合规则的代码就会变黄，alt + enter 组合键进行修改。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-6f4a2559a328546e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssi.png"></p>
<p>这个方法对 java 源码同样适用，只需要修改 file type。</p>
<h2 id="Search-Structurally"><a href="#Search-Structurally" class="headerlink" title="Search Structurally"></a>Search Structurally</h2><p>这个和 Replace Structurally 大同小异，不再赘述，请自行尝试一下吧，^_^。</p>
<h2 id="Designtime-Attributes"><a href="#Designtime-Attributes" class="headerlink" title="Designtime  Attributes"></a>Designtime  Attributes</h2><p>在写好布局文件后，我们可能想要直接看一下 preview 效果，但是不想在编译时还预设这些属性和值，这个时候可以使用 tools 这个强大的工具。<br>首先我们要在布局文件中声明 <code>xmlns:tools=&quot;http://schemas.android.com/tools&quot;</code>，放在最外层的 layout 就好。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">...</span></div></pre></td></tr></table></figure></p>
<p>使用起来跟 <code>xmlns:android</code> 没有什么差别。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">tools:visibility</span>=<span class="string">"visible"</span></div><div class="line">    <span class="attr">tools:text</span>=<span class="string">"tools"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
<p>这里面比较逆天的是 <code>tools:listitem</code> ，看下面这段代码！<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">GridView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@android:id/list"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:numColumns</span>=<span class="string">"4"</span></div><div class="line">    <span class="attr">tools:listitem</span>=<span class="string">"@android:layout/simple_list_item_2"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>猜到了吗？它可以直接让我们 preview GridView的效果！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-4f6d6542f309de29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tools.png"></p>
<p>如果你够细心的话一定会发现异常：那就是那个ToolBar 和 FAB 哪来的？！因为有 <code>tools:showIn</code>。这个属性声明在最顶层的 layout，值是 include 了本布局的一个父布局，它使得预览本布局时同时会渲染该父布局。</p>
<p>更多的 tools attributes 可以访问官方文档 <a href="http://tools.android.com/tech-docs/tools-attributes" target="_blank" rel="external">Android Tools Project Site: Tools Attributes</a>  </p>
<h2 id="Private-Resources"><a href="#Private-Resources" class="headerlink" title="Private Resources"></a>Private Resources</h2><p>Android studio 默认 library 的所有 resource 为 public，如果想保护某些 resources 不被外部访问，可以创建 res/values/public.xml，因为 public 是关键词，所以需要用 new file 的方式创建。至少要添加一行，未添加的则视为 private。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">name</span>=<span class="string">"mylib_app_name"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://developer.android.com/intl/zh-cn/tools/studio/studio-features.html#private-res" target="_blank" rel="external">Public and Private Resources</a></p>
<p>另外，如果在 library 的 build.gradle 中添加 <code>resourcePrefix</code> ，则所有资源必须以此 prefix 开头，否则会报错。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    resourcePrefix <span class="string">'my_prefix_'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Resource-Shrinking"><a href="#Resource-Shrinking" class="headerlink" title="Resource Shrinking"></a>Resource Shrinking</h2><p>这一段讲解了一个减少未使用的资源文件的技巧，可以参考官方文档：<a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking" target="_blank" rel="external">Android Tools Project Site: Resource Shrinking</a> ，我就不做二次消化了。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li><p><a href="http://developer.android.com/intl/zh-cn/sdk/installing/studio-tips.html" target="_blank" rel="external">Android Studio Tips and Tricks</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">IntelliJ IDEA Default Keymap</a></p>
</li>
<li><p><a href="http://blog.csdn.net/growth58/article/details/46729803" target="_blank" rel="external">Android Studio使用技巧系列教程</a></p>
</li>
</ol>
<hr>
<blockquote>
<p>这是 Siva Velusamy 的演讲，这小伙的口音太重了！</p>
</blockquote>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="Analyze-Stacktrace"><a href="#Analyze-Stacktrace" class="headerlink" title="Analyze Stacktrace"></a>Analyze Stacktrace</h3><p>这个用于我们在分析  bug report 时很有用，使得它可以被点击然后定位到出错代码位置。复制它，然后打开 Analyze Stacktrace Dialog，入口为 <strong>Analyze → Analyze Stacktrace</strong> 或者搜索 <strong>analyze stacktrace﻿</strong></p>
<p>测试用 bug report：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Process: com.iamwent.androidart, PID: <span class="number">28178</span></div><div class="line">java.lang.RuntimeException: Unable to resume activity &#123;com.iamwent.androidart/com.iamwent.androidart.MainActivity&#125;: java.lang.ArrayIndexOutOfBoundsException: length=<span class="number">3</span>; index=<span class="number">3</span></div><div class="line">    at android.app.ActivityThread.performResumeActivity(ActivityThread.java:<span class="number">2999</span>)</div><div class="line">    at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:<span class="number">3030</span>)</div><div class="line">    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2413</span>)</div><div class="line">    at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">144</span>)</div><div class="line">    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1321</span>)</div><div class="line">    at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</div><div class="line">    at android.os.Looper.loop(Looper.java:<span class="number">135</span>)</div><div class="line">    at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5277</span>)</div><div class="line">    at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">372</span>)</div><div class="line">    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">919</span>)</div><div class="line">    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">714</span>)</div><div class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: length=<span class="number">3</span>; index=<span class="number">3</span></div><div class="line">    at com.iamwent.androidart.MainActivity.fromByteArray(MainActivity.java:<span class="number">32</span>)</div><div class="line">    at com.iamwent.androidart.MainActivity.onResume(MainActivity.java:<span class="number">28</span>)</div><div class="line">    at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:<span class="number">1244</span>)</div><div class="line">    at android.app.Activity.performResume(Activity.java:<span class="number">6069</span>)</div><div class="line">    at android.app.ActivityThread.performResumeActivity(ActivityThread.java:<span class="number">2988</span>)</div><div class="line">    at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:<span class="number">3030</span>) </div><div class="line">    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2413</span>) </div><div class="line">    at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">144</span>) </div><div class="line">    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1321</span>) </div><div class="line">    at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</div></pre></td></tr></table></figure></p>
<p>我测试中发现，Analyze Stacktrace 好像分析的是当前复制到剪贴板的内容，所以先 crtl + c 一下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-17ff596d42af692a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="as.png"></p>
<p>对于第一个红框，它不是可选状态的，Siva 说的是有可能因为被混淆过了，但是我的 demo 并没有混淆，有待研究吧。然后，这就像我们在 Android Monitor 中抓到的 log 一样，可以直接跳转到出错代码处了。另外，可以点开左下的 Show files modification info，它会显示文件修改记录，让 Peter 现形。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-ef5176fa3a635c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="st.png"></p>
<h3 id="View-As"><a href="#View-As" class="headerlink" title="View As"></a>View As</h3><p>这个技巧讲的是 debug 的时候，在想要查看的 变量上面右键 -&gt; View as ，选择合适的数据类型，可以更直观的看到该数据的状态：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-cbaaf9458b392316.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vah.png"></p>
<h3 id="Customize-Data-View"><a href="#Customize-Data-View" class="headerlink" title="Customize Data View"></a>Customize Data View</h3><p>我们还可以定制显示形式，这对于查看比较复杂的数据很有帮助，方法如上，右键选择 Customize Data View，然后如下图般做一些配置，就可以更直观的看到我们关注的信息了。我修改了渲染一个节点时的表达式，所以显示的是 5 。 Siva 演讲的时候修改的是 expanding a node 的表达式，这是错的，默认就好。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-f5c63f5831002485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cdv.png"></p>
<h3 id="Evaluate-Expression"><a href="#Evaluate-Expression" class="headerlink" title="Evaluate Expression"></a>Evaluate Expression</h3><p>另外还可以用 Evaluate Expression 来直接观察，它会跟随变化，也是右击进入，或者 alt + f8 。<br><img src="http://upload-images.jianshu.io/upload_images/42817-fb6a7d7212662770.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="e.png"></p>
<h3 id="Break-Point"><a href="#Break-Point" class="headerlink" title="Break Point"></a>Break Point</h3><p>可以在断点上右击，给断点加上生效条件；或者设置断点不是 suspend，而是打印一些信息，ctrl + shift + f8</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-899d238a219d6d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bp.png"></p>
<hr>
<blockquote>
<p>接下来是 Alex Ruiz – 我还以为 Ruiz 是瑞兹大魔王呢…</p>
</blockquote>
<h2 id="Android-导入-jar-aar-module"><a href="#Android-导入-jar-aar-module" class="headerlink" title="Android 导入 jar/aar module"></a>Android 导入 jar/aar module</h2><p>这个比较简单，如图，new module，然后选择 import .JAR/.AAR project，然后一步步操作。<br><img src="http://upload-images.jianshu.io/upload_images/42817-7faf8024455633a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="import.png"></p>
<p>很值得注意的一点是，所有演讲的工程师都喜欢用 <strong>double shift + 关键字</strong> 的方式来完成作业，像上面的新建 module，他们会 <strong>double shift</strong> 调出对话框搜索 <strong>new module</strong> 的方式。十分高效！</p>
<p>new module 导入进来了，你还要做点配置。假设新 module 叫 smart，在 app/build.gradle 的 dependencies 中加入这一行<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(<span class="string">':smart'</span>)</div></pre></td></tr></table></figure></p>
<p>另外根目录下的 settings.gradle 中也要 include 进去，大概长这样<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include <span class="string">':app'</span>, <span class="string">':smart'</span></div></pre></td></tr></table></figure></p>
<p>事实上我们完全可以用 Android Studio 自带的工程管理功能自动完成这一任务，直接从工具栏打开 Project Structure，或者 ctrl + alt + shift + s 组合键，操作如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-fa74c23c25af2502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project.png"></p>
<h2 id="Run-Any-Gradle-Task"><a href="#Run-Any-Gradle-Task" class="headerlink" title="Run Any Gradle Task"></a>Run Any Gradle Task</h2><p>这个 tip 很方便，如下图，打开 gradle project，很多 task —— 如果没有点击同步一下，双击就可以运行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-bd54c592a5a3a0c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="task.png"></p>
<h2 id="Build-Variants"><a href="#Build-Variants" class="headerlink" title="Build Variants"></a>Build Variants</h2><p>首先一个技巧是通过 Build Variants 来选择运行时的任务，做过多渠道打包应该遇到过。<br><img src="http://upload-images.jianshu.io/upload_images/42817-bc33e120a314b5a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="variants.png"></p>
<p>另外一个技巧是，重构方法名或者类名时，让 Android Instrumentation Tests 和 Unit Tests 都能够随之一起被重构（默认只有一个是 active 的，project 窗口会高亮选中的 Tests），这需要打开 Android Studio 的一个选项，如下图。这个可能是 2.0 的功能，我在 1.5 上未发现该设置选项。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-e19952297a80e3f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test.png"></p>
<p>关于两种测试的最大区别从名字上就看的出来，Unit Tests 是 local tests，直接运行在电脑的 JVM 中，而则需要运行在  Android device 或者 emulator 上。更多可参考官方文档：<a href="http://developer.android.com/intl/zh-cn/training/testing/unit-testing/index.html" target="_blank" rel="external">Building Effective Unit Tests</a> 。</p>
<hr>
<blockquote>
<p>这是 Michal Bendowski 的演讲</p>
</blockquote>
<h2 id="Create-Test-Classes"><a href="#Create-Test-Classes" class="headerlink" title="Create Test Classes"></a>Create Test Classes</h2><p>很简单，光标移动到被测试类名上，alt + enter，选择 create test，即可创建，使用组合键 ctrl + shift + t 可以在二者之间来回切换，当然，它还可以用于创建测试类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-fe2c68daad306a05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ct.png"></p>
<p>在 1.5 上创建测试类的时候和 build variants 中的选择有关，但是 Michal 演示的时候不需要担心这个，而且重构的时候也能同时被一起重构，应该是 2.0 的新功能。</p>
<p><del>后面还有 NDK 调试和 CPU 优化调试，有空再说，囧</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;冒死总结！有些地方不知道怎么描述，自己动手感受一番吧。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我只总结了前面五分多钟讲的快捷方式。后面的高级技巧我还在学习中，坑慢慢填。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;已将 Tor Norbye 演讲的编辑技巧补充完。&lt;/p&gt;
&lt;p&gt;再来一波更新~duang~还有最后的 NDK 调试和 CPU 优化调试没总结，有空再说，囧&lt;/p&gt;
&lt;p&gt;补充一点：我的测试环境是 win7 + as 1.5，有错误的地方还请指出，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天&lt;a href=&quot;http://weibo.com/2491729875/D5vFEdvuC&quot;&gt;@陈启超同学&lt;/a&gt;发了 Android Studio for Experts (Android Dev Summit 2015) 的视频，我也跟着学习了一下。这个视频讲的非常好！做点小结，分享交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Studio" scheme="http://blog.iamwent.cn/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>打造更好用的 Android Studio：添加 Templates 以及改造 gradle-projects</title>
    <link href="http://blog.iamwent.cn/2015/11/25/android-studio-templates/"/>
    <id>http://blog.iamwent.cn/2015/11/25/android-studio-templates/</id>
    <published>2015-11-25T13:19:30.000Z</published>
    <updated>2017-02-06T03:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>对模板工程的改造有可能造成 Android Studio 更新失败！</strong></p>
<p>最近我从 1.5 -&gt; 1.5.1 更新失败，就是对模板工程的改造造成了冲突！</p>
<p>中午 @drakeet 秀了一波他改造的两个小模板，另外还发了几张官方自带模板的本地位置图片，我也跟着改造了一把。</p>
</blockquote>
<h2 id="添加自定义-Templates"><a href="#添加自定义-Templates" class="headerlink" title="添加自定义 Templates"></a>添加自定义 Templates</h2><p>自定义的位置入口在这儿：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-16f180a2841bae45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="edit.png"></p>
<a id="more"></a>
<p>然后，选择 Templates 按 + 就可以一步步操作啦。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-2d11d4bc9c7ce8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="templates.png"></p>
<p>Description 处有些很有用的说明，这里指出了多个占位符号，可以在根据模板类生成具体的类时替换成合适的字符。</p>
<ul>
<li>静态内部类实现的单例。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125;&#123;</div><div class="line">    public static $&#123;NAME&#125; getInstance() &#123;</div><div class="line">        return $&#123;NAME&#125;Holder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private $&#123;NAME&#125;() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class $&#123;NAME&#125;Holder &#123;</div><div class="line">        private static final $&#123;NAME&#125; sInstance = new $&#123;NAME&#125;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BaseAdapter，引入 provideItemLayout() 方法是为了解决 R 文件引入的包名问题，ViewHolder.bind(Object)  可以将 UI 和数据绑定放在一起。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.support.annotation.LayoutRes;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.BaseAdapter;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125; extends BaseAdapter &#123;</div><div class="line"></div><div class="line">    private Context ctx;</div><div class="line">    private List&lt;Object&gt; objects;</div><div class="line"></div><div class="line">    public $&#123;NAME&#125;(Context ctx, List&lt;Object&gt; objects) &#123;</div><div class="line">        this.ctx = ctx;</div><div class="line">        this.objects = objects;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private @LayoutRes int provideItemLayout() &#123;</div><div class="line">        // todo</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return objects == null ? 0 : objects.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getItem(int position) &#123;</div><div class="line">        return objects.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getItemId(int position) &#123;</div><div class="line">        return position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">        ViewHolder holder;</div><div class="line">        </div><div class="line">        if (convertView == null) &#123;</div><div class="line">            convertView = LayoutInflater.from(ctx).inflate(provideItemLayout(), parent, false);</div><div class="line">            </div><div class="line">            holder = new ViewHolder(convertView);</div><div class="line">            convertView.setTag(holder);</div><div class="line">        &#125; else &#123;</div><div class="line">            holder = (ViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        holder.bind(objects.get(position));</div><div class="line">        </div><div class="line">        return convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class ViewHolder &#123;</div><div class="line">        </div><div class="line">        public ViewHolder(View convertView) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public void bind(Object o) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>RecyclerView Adapter</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.support.annotation.LayoutRes;</div><div class="line">import android.support.v7.widget.RecyclerView;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125; extends RecyclerView.Adapter&lt;$&#123;NAME&#125;.ViewHolder&gt;  &#123;</div><div class="line"></div><div class="line">    private Context ctx;</div><div class="line">    private List&lt;Object&gt; objects;</div><div class="line"></div><div class="line">    public $&#123;NAME&#125;(Context ctx, List&lt;Object&gt; objects) &#123;</div><div class="line">        this.ctx = ctx;</div><div class="line">        this.objects = objects;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private</div><div class="line">    @LayoutRes</div><div class="line">    int provideItemLayout() &#123;</div><div class="line">        // todo</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        View view = LayoutInflater.from(ctx).inflate(provideItemLayout(), parent, false);</div><div class="line">        return new ViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</div><div class="line">        holder.bind(objects.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return objects == null ? 0 : objects.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class ViewHolder extends RecyclerView.ViewHolder &#123;</div><div class="line"></div><div class="line">        public ViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            //todo</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void bind(Object o) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="改造-gradle-projects"><a href="#改造-gradle-projects" class="headerlink" title="改造 gradle-projects"></a>改造 gradle-projects</h2><p>在添加了几个自定义的 Templates 之后，我想能不能去改造一下整个 project，让它自动帮我们创建更多的文件、配置更多的内容。</p>
<blockquote>
<p>我曾经想改造一下，但是没有 Google 到方法，然后我创建了一个工程，把必须要的依赖啊、包啊、类啊都配置好，想要以后再新建工程时直接 copy 一份然后修改包名就行了，后来我发现改包名太累，放弃了。</p>
</blockquote>
<p>以下就是手术过程。</p>
<h3 id="找到模板工程位置："><a href="#找到模板工程位置：" class="headerlink" title="找到模板工程位置："></a>找到模板工程位置：</h3><p><strong>AndroidStudio\plugins\android\lib\templates\gradle-projects</strong></p>
<p>这个下面有多个文件夹，一看名字就知道是干啥的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-644b83e89aad25b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="projects.png"></p>
<p>###<strong>改造前请先备份！</strong></p>
<p>##<strong>改造前请先备份！</strong></p>
<p>#<strong>改造前请先备份！</strong><br></p><p></p>
<h4 id="先看-NewAndroidProject-有什么可以改造的没有"><a href="#先看-NewAndroidProject-有什么可以改造的没有" class="headerlink" title="先看 NewAndroidProject 有什么可以改造的没有"></a>先看 NewAndroidProject 有什么可以改造的没有</h4><p>研究了一下这个目录下的文件，我发现最重要的是<code>recipe.xml.ftl</code> 这个文件，它描述了工程创建过程应该做些什么，copy 操作是简单的复制，instantiate 操作是实例化，AS 除了生成一些变量替换掉占位符，还会插入一些内容。<code>globals.xml.ftl</code> 则定义了一些常量。据此，我们可以修改的文件是<br> <code>NewAndroidProject\root\project_ignore</code> 和 <code>NewAndroidProject\root\local.properties.ftl</code>，前者是整个工程的 ignore 文件，可以在 <a href="https://www.gitignore.io" target="_blank" rel="external">https://www.gitignore.io</a> 生成一份拷贝进去，后者我们可以定义一些密码之类的（要确保该文件不会加入版本控制系统）。</p>
<h3 id="接下来看看-NewAndroidModule-有什么可以改造的没有"><a href="#接下来看看-NewAndroidModule-有什么可以改造的没有" class="headerlink" title="接下来看看 NewAndroidModule 有什么可以改造的没有"></a>接下来看看 NewAndroidModule 有什么可以改造的没有</h3><p>根据前面的经验，先研究一下 <code>recipe.xml.ftl</code> 这个文件，有以下发现：</p>
<ol>
<li>第 4 行的 dependency 定义 appcompat-v7</li>
<li>第 14 行实例化了 build.gradle</li>
<li>第 19 行创建了 drawable 文件夹</li>
<li>第 33 行拷贝了 module 的 ignore</li>
<li>第 37 行生成了 proguard 文件</li>
<li>第 55 行生成了 res/value/strings.xml</li>
</ol>
<p>继续研究 <code>NewAndroidModule\root</code> 下的文件。</p>
<ol>
<li>build.gradle.ftl 是 module 的 build.gradle 模板，我想提前做点配置进去。我比较疑惑的是第 65 行的 <code>&lt;#if dependencyList?? &gt;</code> ，这里看起来是某个地方定义了一个依赖列表，但是并没有发现。回过头去看 <code>recipe.xml.ftl</code> ，它的第 4 行是 <code>&lt;dependency mavenUrl=&quot;com.android.support:appcompat-v7:${buildApi}.+&quot;/&gt;</code> ，我猜测可能这就是定义的地方，于是在这后面仿写了一句 <code>&lt;dependency mavenUrl=&quot;com.jakewharton:butterknife:7.0.1&quot;/&gt;</code> ，创建工程验证确实如我所猜测的那样。</li>
<li>module_ignore 最简单，根据我们的需要再添加一些语句就行</li>
<li>proguard-rules.txt.ftl 会被实例化到 proguard-rules.pro，可以根据对 <code>build.gradle.ftl</code> 的修改适当修改</li>
</ol>
<p>还可以继续改造的是：自动生成一些包，让程序架构更清晰，先把架子搭起来嘛。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.jetbrains.com/help/idea/2016.2/file-and-code-templates.html" target="_blank" rel="external">File and Code Templates</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21301904#tipjar" target="_blank" rel="external">使用FreeMarker模板引擎自定义Android工程模板</a></li>
<li><a href="https://github.com/gabrielemariotti/AndroidStudioTemplate" target="_blank" rel="external">AndroidStudioTemplate</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对模板工程的改造有可能造成 Android Studio 更新失败！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近我从 1.5 -&amp;gt; 1.5.1 更新失败，就是对模板工程的改造造成了冲突！&lt;/p&gt;
&lt;p&gt;中午 @drakeet 秀了一波他改造的两个小模板，另外还发了几张官方自带模板的本地位置图片，我也跟着改造了一把。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;添加自定义-Templates&quot;&gt;&lt;a href=&quot;#添加自定义-Templates&quot; class=&quot;headerlink&quot; title=&quot;添加自定义 Templates&quot;&gt;&lt;/a&gt;添加自定义 Templates&lt;/h2&gt;&lt;p&gt;自定义的位置入口在这儿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/42817-16f180a2841bae45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;edit.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Studio" scheme="http://blog.iamwent.cn/tags/Android-Studio/"/>
    
  </entry>
  
</feed>
