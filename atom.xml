<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamwent</title>
  <subtitle>Lazy</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.iamwent.cn/"/>
  <updated>2017-02-06T04:02:27.000Z</updated>
  <id>http://blog.iamwent.cn/</id>
  
  <author>
    <name>iamwent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dagger2 Step to Step</title>
    <link href="http://blog.iamwent.cn/2016/03/09/dagger2-step-to-step/"/>
    <id>http://blog.iamwent.cn/2016/03/09/dagger2-step-to-step/</id>
    <published>2016-03-09T10:07:13.000Z</published>
    <updated>2017-02-06T04:02:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>假设你已经了解 <a href="http://www.devtf.cn/?p=1248" target="_blank" rel="external"><strong>依赖注入</strong></a> 这一概念，只是在如何使用 Dagger 时遇到了一些困扰，因为 Dagger 其实是一个上手难度颇高的库。我试图通过这篇文章解决如何上手这一问题。</p>
</blockquote>
<p>目前 Dagger 有两个分支，一个由 <a href="https://github.com/square/dagger" target="_blank" rel="external">Square</a> 维护，一个为 Google 在前者的基础上开出的分支，即 <a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger 2</a> 。关于二者的比较，<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">点击此处</a> 。</p>
<p>本文写作过程中参考了不少优秀的 Dagger 文章，列在文章末尾。</p>
<p><strong>在此一并感谢他们的工作！</strong></p>
<h2 id="Dagger"><a href="#Dagger" class="headerlink" title="Dagger"></a>Dagger</h2><p>在引入 Dagger 之前，我们需要了解一些基础概念。Dagger 主要分三块：</p>
<ul>
<li><strong>@Inject</strong>：需要注入依赖的地方，Dagger 会构造一个该类的实例并满足它所需要的依赖；</li>
<li><strong>@Module</strong>：依赖的提供者，Module 类中的方法专门提供依赖，并用 <strong>@Provides</strong> 注解标记；</li>
<li><strong>@Component</strong>：依赖的注入者，是 <strong>@Inject</strong> 和 <strong>@Module</strong> 的桥梁，它从 <strong>@Module</strong> 中获取依赖并注入给 <strong>@Inject</strong>。</li>
</ul>
<p>对于以上关系，一句话解释就是：<strong>模块（Module）负责提供依赖，组件（Component）负责注入依赖。</strong></p>
<h2 id="Sourcecode"><a href="#Sourcecode" class="headerlink" title="Sourcecode"></a>Sourcecode</h2><p>源码放在 Github: <a href="https://github.com/iamwent/DaggerDemo" target="_blank" rel="external">DaggerDemo</a></p>
<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><ol>
<li><p>project/build.gradle</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line"></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>project/app/build.gradle</p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.neenbedankt.android-apt'</span></div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">//Required by Dagger2</span></div><div class="line">    apt <span class="string">'com.google.dagger:dagger-compiler:2.0.2'</span></div><div class="line">    compile <span class="string">'com.google.dagger:dagger:2.0.2'</span></div><div class="line">    <span class="comment">// Dagger 2 中会用到 @Generated 注解，而 Android SDK 中没有 javax.anotation.Generated.class，所以在 Android 项目要添加此句</span></div><div class="line">    provided <span class="string">'org.glassfish:javax.annotation:10.0-b28'</span> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>Demo 实现一个简单的 <code>ListView</code> 显示字符串列表</p>
<ol>
<li>创建 <code>UserAdapter</code> 类，并在构造函数前添加 <strong>@Inject</strong> 注解。这样，Dagger 就会在需要获取 <code>UserAdapter</code> 对象时，调用这个被标记的构造函数，从而生成一个 <code>UserAdapter</code> 对象。 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> LayoutInflater inflater;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; users;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserAdapter</span><span class="params">(Context ctx, List&lt;String&gt; users)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.inflater = LayoutInflater.from(ctx);</div><div class="line">        <span class="keyword">this</span>.users = users;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>需要注意的是：如果构造函数含有参数，Dagger 会在调用构造对象的时候先去获取这些参数(不然谁来传参？)，所以你要保证它的参数也提供可被 Dagger 调用到的生成函数。Dagger 可调用的对象生成方式有两种：一种是用 **@Inject** 修饰的构造函数，上面就是这种方式。另外一种是用 **@Provides** 修饰的函数，下面会讲到。[参考：Dagger 源码解析](http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90)
</code></pre><ol>
<li><p>构建 Module，提供 Context 和 List<string> 依赖，如此， Dagger 生成 UserAdapter 时所需要的依赖就从这里获取。</string></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModule</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserModule</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function">Context <span class="title">provideActivityContext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Provides</span></div><div class="line">    <span class="meta">@ActivityScope</span></div><div class="line">    <span class="function">List&lt;String&gt; <span class="title">provideUsers</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(COUNT);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COUNT; i++) &#123;</div><div class="line">            users.add(<span class="string">"item "</span> + i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> users;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>@ActivityScope</strong> 是一个自定义的范围注解，作用是允许对象被记录在正确的组件中，当然这些对象的生命周期应该遵循 Activity 的生命周期。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.inject.Scope;</div><div class="line"></div><div class="line"><span class="meta">@Scope</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>构建 Component，负责注入依赖</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ActivityScope</span></div><div class="line"><span class="meta">@Component</span>(modules = &#123;UserModule.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserComponent</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainActivity activity)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>注意</strong>：这里必须是真正消耗依赖的类型 <code>MainActivity</code>，而不可以写成其父类，比如   <code>Activity</code> ，否则会导致注入失败。(<a href="http://codethink.me/2015/08/06/dependency-injection-with-dagger-2/" target="_blank" rel="external">参考：使用Dagger 2进行依赖注入</a>)</p>
</li>
<li><p>完成依赖注入</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    UserAdapter adapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        </div><div class="line">        ...</div><div class="line"></div><div class="line">        <span class="comment">// 完成注入</span></div><div class="line">        DaggerUserComponent.builder()</div><div class="line">            .userModule(<span class="keyword">new</span> UserModule(<span class="keyword">this</span>))</div><div class="line">            .build()</div><div class="line">            .inject(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        listView.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <strong>如果找不到 <code>DaggerUserComponent</code> 类，你需要先编译一下整个项目。</strong>这是因为 Dagger 是在编译时生成必要的元素，编译时 Dagger 会处理我们的注解，为 @Components 生成实现并命名为 <code>Dagger$${YouComponentClassName}</code>，如 <code>UserComponent</code> -&gt; <code>DaggerUserComponent</code> 。你可以在 <code>app/build/generated/source/apt</code> 下找到相关的类。</p>
<p> 实际上，调用 inject 方法最终调用的是以下这样一段代码，更多细节可以查看源码。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(MainActivity instance)</span> </span>&#123;  </div><div class="line">  <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);</div><div class="line">  &#125;</div><div class="line">  supertypeInjector.injectMembers(instance);</div><div class="line">  instance.adapter = adapterProvider.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Dagger-too"><a href="#Dagger-too" class="headerlink" title="Dagger too"></a>Dagger too</h2><ol>
<li><p>@Inject 和 @Provide 两种依赖生成方式的区别：</p>
<ul>
<li>@Inject 用于注入可实例化的类，@Provides 可用于注入所有类</li>
<li>@Inject 可用于修饰属性和构造函数，可用于任何非 Module 类，@Provides 只可用于用于修饰非构造函数，并且该函数必须在某个Module内部</li>
<li>@Inject 修饰的函数只能是构造函数，@Provides 修饰的函数必须以 provide 开头</li>
</ul>
</li>
<li><p>Dagger 的其他注解：</p>
<ul>
<li><strong>@Scope</strong>： Dagger 可以通过自定义注解限定注解作用域，参考前面的 <strong>@ActivityScope</strong>。</li>
<li><strong>@Qualifier</strong>：限定符，当类的类型不足以鉴别一个依赖的时候，我们就可以使用这个注解来区分。例如：在 Android 中，我们会需要不同类型的 Context，所以我们可以定义 @Qualifier 注解 <code>@ForApplication</code> 和 <code>@ForActivity</code>，这样当注入一个 Context 的时候，我们就可以告诉  Dagger 我们想要哪种类型的 Context。</li>
<li><strong>@Singleton</strong>：单例模式，依赖的对象只会被初始化一次</li>
</ul>
</li>
<li><p>Dagger 的实际应用：本例只是一个上手教程，辅助理解 Dagger 的原理及使用方式，具体的项目应用可以参考 Reference 中第 3 条的 <a href="https://github.com/saulmm/Avengers" target="_blank" rel="external">Avengers 的源码</a> 。</p>
</li>
</ol>
<h2 id="Practice"><a href="#Practice" class="headerlink" title="Practice"></a>Practice</h2><p>Google 最近新开了一个 repo：<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-dagger_fixProguard" target="_blank" rel="external">android-architecture</a>，不仅有多种架构方案，还有完整的测试，是非常好的学习项目。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger 2 Official Documentation</a></li>
<li><a href="http://fernandocejas.com/2015/04/11/tasting-dagger-2-on-android/" target="_blank" rel="external">Tasting Dagger 2 on Android</a>，中文：<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0519/2892.html" target="_blank" rel="external">详解 Dagger 2</a></li>
<li><a href="http://saulmm.github.io/when-Thor-and-Hulk-meet-dagger2-rxjava-1" target="_blank" rel="external">When the Avengers meet Dagger2, RxJava and Retrofit in a clean way</a>，中文：<a href="http://www.devtf.cn/?p=565" target="_blank" rel="external">当复仇者联盟遇上 Dragger2、RxJava 和 Retrofit 的巧妙结合</a></li>
<li><a href="http://codethink.me/2015/08/06/dependency-injection-with-dagger-2/" target="_blank" rel="external">使用 Dagger 2 进行依赖注入</a></li>
<li><a href="http://a.codekk.com/detail/Android/%E6%89%94%E7%89%A9%E7%BA%BF/Dagger%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">Dagger 源码解析</a> (PS: 这是 Dagger 1，但是很有参考价值)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;假设你已经了解 &lt;a href=&quot;http://www.devtf.cn/?p=1248&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;依赖注入&lt;/strong&gt;&lt;/a&gt; 这一概念，只是在如何使用 Dagger 时
    
    </summary>
    
    
      <category term="dagger" scheme="http://blog.iamwent.cn/tags/dagger/"/>
    
  </entry>
  
  <entry>
    <title>Android Studio for Experts：Edit &amp; Debug &amp; Test</title>
    <link href="http://blog.iamwent.cn/2015/11/26/android-studio-for-experts/"/>
    <id>http://blog.iamwent.cn/2015/11/26/android-studio-for-experts/</id>
    <published>2015-11-26T00:31:30.000Z</published>
    <updated>2017-02-06T03:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>冒死总结！有些地方不知道怎么描述，自己动手感受一番吧。</p>
<p><del>我只总结了前面五分多钟讲的快捷方式。后面的高级技巧我还在学习中，坑慢慢填。</del></p>
<p>已将 Tor Norbye 演讲的编辑技巧补充完。</p>
<p>再来一波更新~duang~还有最后的 NDK 调试和 CPU 优化调试没总结，有空再说，囧</p>
<p>补充一点：我的测试环境是 win7 + as 1.5，有错误的地方还请指出，谢谢。</p>
</blockquote>
<p>昨天<a href="http://weibo.com/2491729875/D5vFEdvuC" target="_blank" rel="external">@陈启超同学</a>发了 Android Studio for Experts (Android Dev Summit 2015) 的视频，我也跟着学习了一下。这个视频讲的非常好！做点小结，分享交流。</p>
<a id="more"></a>
<h2 id="Completion"><a href="#Completion" class="headerlink" title="Completion"></a>Completion</h2><ol>
<li><p>使用 Tab 补全，会自动编辑光标之后的字符串，如下，你在光标处键入 c 然后选择 <code>contentEquals</code> 然后回车，magic！<br><img src="http://upload-images.jianshu.io/upload_images/42817-7bdb7da5530aba28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c.png"></p>
</li>
<li><p>使用 ctrl + shift + space 智能补全，比如下图，按下组合键，magic！可以按两次哦！<br><img src="http://upload-images.jianshu.io/upload_images/42817-7552ac90d17d7ede.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c2.png"></p>
</li>
<li><p>补充一个，尝试在编辑器中输入：<code>new Bitmap().var</code></p>
</li>
</ol>
<h2 id="Selection"><a href="#Selection" class="headerlink" title="Selection"></a>Selection</h2><ol>
<li><p>ctrl+ w 选中，继续操作会扩大选中范围，相反的操作是 ctrl + shift + w</p>
</li>
<li><p>选中后可以使用 Extra 快捷键重构为变量、方法等，这个可以在 Refactor -&gt; Extra 下看到。<br>ctrl+ alt+ v：变量<br>ctrl+ alt+ c：常量<br>ctrl+ alt+ f：域值<br>ctrl+ alt+ p：参数<br>ctrl+ alt+ m：方法</p>
</li>
<li><p>这里我有一个快捷键没有听出来，就是从构造函数提取 parameters 为 fields，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Init</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Init</span><span class="params">(String first, <span class="keyword">boolean</span> second, <span class="keyword">int</span> third)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>感谢评论区的 <a href="http://www.jianshu.com/users/920f759288e8" target="_blank" rel="external">@Will92Wang</a> 指出，这个快捷键就是 alt + enter ，这是一个很强大的组合键。<br><img src="http://upload-images.jianshu.io/upload_images/42817-032c360388617932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="c.png"> </p>
<h2 id="LiveTemplates"><a href="#LiveTemplates" class="headerlink" title="LiveTemplates"></a>LiveTemplates</h2><p>这个内容极度丰富，<a href="http://weibo.com/1954362070/CwG3L1woG" target="_blank" rel="external">我以前发过微博</a>，可以在 <strong>Setting -&gt; Editor -&gt; Live Templates</strong> 下查看。举几个例子：</p>
<ol>
<li><p><code>fori</code> 和 <code>foreach</code>，在需要使用 <code>for</code> 循环时，尝试输入这两种 <code>for</code> 试试；</p>
</li>
<li><p>你还可以在数据集合变量后输入 <code>.for</code>，例如 <code>list.for</code> ，这时候你看一下补全，会列出三种 <code>for</code> 循环形式让你选择；</p>
</li>
<li><p><code>logt</code>, <code>logd</code>, <code>logm</code>，在方法外输入 <code>logt</code>，在方法内输入 <code>logd</code> 试试；</p>
</li>
<li><p>另外还有 <code>fbc</code>, <code>gone</code>, <code>iter</code> 等等，感兴趣的话可以在 <strong>Setting -&gt; Editor -&gt; Live Templates</strong> 下看看。</p>
</li>
</ol>
<hr>
<p>接下来可以说是牛哄哄的技巧了，同时也说明 Android Studio 真是强大！</p>
<h2 id="Replace-Structurally"><a href="#Replace-Structurally" class="headerlink" title="Replace Structurally"></a>Replace Structurally</h2><p>这里就不得不贴上很多代码了。比如以下资源文件，现在你想去掉所有的 <code>translation_description</code> ，技巧是使用 双击 shift 或者 ctrl + shift + a 调出搜索框然后搜索并选择 replace structurally ，编辑规则，选择 find，然后就可以十分便捷的批量修改了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"a_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"s_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"d_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"f_fragment"</span> <span class="attr">translation_description</span>=<span class="string">"false"</span>&gt;</span>Hello blank fragment<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-9a5217b56fedbcd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rs.png"></p>
<p>另外你还可以把这个加入设置中，由编辑器自动检查，不符合规则的代码就会变黄，alt + enter 组合键进行修改。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-6f4a2559a328546e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssi.png"></p>
<p>这个方法对 java 源码同样适用，只需要修改 file type。</p>
<h2 id="Search-Structurally"><a href="#Search-Structurally" class="headerlink" title="Search Structurally"></a>Search Structurally</h2><p>这个和 Replace Structurally 大同小异，不再赘述，请自行尝试一下吧，^_^。</p>
<h2 id="Designtime-Attributes"><a href="#Designtime-Attributes" class="headerlink" title="Designtime  Attributes"></a>Designtime  Attributes</h2><p>在写好布局文件后，我们可能想要直接看一下 preview 效果，但是不想在编译时还预设这些属性和值，这个时候可以使用 tools 这个强大的工具。<br>首先我们要在布局文件中声明 <code>xmlns:tools=&quot;http://schemas.android.com/tools&quot;</code>，放在最外层的 layout 就好。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">...</span></div></pre></td></tr></table></figure></p>
<p>使用起来跟 <code>xmlns:android</code> 没有什么差别。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">tools:visibility</span>=<span class="string">"visible"</span></div><div class="line">    <span class="attr">tools:text</span>=<span class="string">"tools"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
<p>这里面比较逆天的是 <code>tools:listitem</code> ，看下面这段代码！<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">GridView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@android:id/list"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:numColumns</span>=<span class="string">"4"</span></div><div class="line">    <span class="attr">tools:listitem</span>=<span class="string">"@android:layout/simple_list_item_2"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>猜到了吗？它可以直接让我们 preview GridView的效果！</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-4f6d6542f309de29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="tools.png"></p>
<p>如果你够细心的话一定会发现异常：那就是那个ToolBar 和 FAB 哪来的？！因为有 <code>tools:showIn</code>。这个属性声明在最顶层的 layout，值是 include 了本布局的一个父布局，它使得预览本布局时同时会渲染该父布局。</p>
<p>更多的 tools attributes 可以访问官方文档 <a href="http://tools.android.com/tech-docs/tools-attributes" target="_blank" rel="external">Android Tools Project Site: Tools Attributes</a>  </p>
<h2 id="Private-Resources"><a href="#Private-Resources" class="headerlink" title="Private Resources"></a>Private Resources</h2><p>Android studio 默认 library 的所有 resource 为 public，如果想保护某些 resources 不被外部访问，可以创建 res/values/public.xml，因为 public 是关键词，所以需要用 new file 的方式创建。至少要添加一行，未添加的则视为 private。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">public</span> <span class="attr">name</span>=<span class="string">"mylib_app_name"</span> <span class="attr">type</span>=<span class="string">"string"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>参考：<a href="http://developer.android.com/intl/zh-cn/tools/studio/studio-features.html#private-res" target="_blank" rel="external">Public and Private Resources</a></p>
<p>另外，如果在 library 的 build.gradle 中添加 <code>resourcePrefix</code> ，则所有资源必须以此 prefix 开头，否则会报错。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    buildTypes &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    resourcePrefix <span class="string">'my_prefix_'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Resource-Shrinking"><a href="#Resource-Shrinking" class="headerlink" title="Resource Shrinking"></a>Resource Shrinking</h2><p>这一段讲解了一个减少未使用的资源文件的技巧，可以参考官方文档：<a href="http://tools.android.com/tech-docs/new-build-system/resource-shrinking" target="_blank" rel="external">Android Tools Project Site: Resource Shrinking</a> ，我就不做二次消化了。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ol>
<li><p><a href="http://developer.android.com/intl/zh-cn/sdk/installing/studio-tips.html" target="_blank" rel="external">Android Studio Tips and Tricks</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf" target="_blank" rel="external">IntelliJ IDEA Default Keymap</a></p>
</li>
<li><p><a href="http://blog.csdn.net/growth58/article/details/46729803" target="_blank" rel="external">Android Studio使用技巧系列教程</a></p>
</li>
</ol>
<hr>
<blockquote>
<p>这是 Siva Velusamy 的演讲，这小伙的口音太重了！</p>
</blockquote>
<h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><h3 id="Analyze-Stacktrace"><a href="#Analyze-Stacktrace" class="headerlink" title="Analyze Stacktrace"></a>Analyze Stacktrace</h3><p>这个用于我们在分析  bug report 时很有用，使得它可以被点击然后定位到出错代码位置。复制它，然后打开 Analyze Stacktrace Dialog，入口为 <strong>Analyze → Analyze Stacktrace</strong> 或者搜索 <strong>analyze stacktrace﻿</strong></p>
<p>测试用 bug report：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Process: com.iamwent.androidart, PID: <span class="number">28178</span></div><div class="line">java.lang.RuntimeException: Unable to resume activity &#123;com.iamwent.androidart/com.iamwent.androidart.MainActivity&#125;: java.lang.ArrayIndexOutOfBoundsException: length=<span class="number">3</span>; index=<span class="number">3</span></div><div class="line">    at android.app.ActivityThread.performResumeActivity(ActivityThread.java:<span class="number">2999</span>)</div><div class="line">    at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:<span class="number">3030</span>)</div><div class="line">    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2413</span>)</div><div class="line">    at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">144</span>)</div><div class="line">    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1321</span>)</div><div class="line">    at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</div><div class="line">    at android.os.Looper.loop(Looper.java:<span class="number">135</span>)</div><div class="line">    at android.app.ActivityThread.main(ActivityThread.java:<span class="number">5277</span>)</div><div class="line">    at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">372</span>)</div><div class="line">    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">919</span>)</div><div class="line">    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">714</span>)</div><div class="line">Caused by: java.lang.ArrayIndexOutOfBoundsException: length=<span class="number">3</span>; index=<span class="number">3</span></div><div class="line">    at com.iamwent.androidart.MainActivity.fromByteArray(MainActivity.java:<span class="number">32</span>)</div><div class="line">    at com.iamwent.androidart.MainActivity.onResume(MainActivity.java:<span class="number">28</span>)</div><div class="line">    at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:<span class="number">1244</span>)</div><div class="line">    at android.app.Activity.performResume(Activity.java:<span class="number">6069</span>)</div><div class="line">    at android.app.ActivityThread.performResumeActivity(ActivityThread.java:<span class="number">2988</span>)</div><div class="line">    at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:<span class="number">3030</span>) </div><div class="line">    at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2413</span>) </div><div class="line">    at android.app.ActivityThread.access$<span class="number">800</span>(ActivityThread.java:<span class="number">144</span>) </div><div class="line">    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1321</span>) </div><div class="line">    at android.os.Handler.dispatchMessage(Handler.java:<span class="number">102</span>)</div></pre></td></tr></table></figure></p>
<p>我测试中发现，Analyze Stacktrace 好像分析的是当前复制到剪贴板的内容，所以先 crtl + c 一下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-17ff596d42af692a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="as.png"></p>
<p>对于第一个红框，它不是可选状态的，Siva 说的是有可能因为被混淆过了，但是我的 demo 并没有混淆，有待研究吧。然后，这就像我们在 Android Monitor 中抓到的 log 一样，可以直接跳转到出错代码处了。另外，可以点开左下的 Show files modification info，它会显示文件修改记录，让 Peter 现形。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-ef5176fa3a635c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="st.png"></p>
<h3 id="View-As"><a href="#View-As" class="headerlink" title="View As"></a>View As</h3><p>这个技巧讲的是 debug 的时候，在想要查看的 变量上面右键 -&gt; View as ，选择合适的数据类型，可以更直观的看到该数据的状态：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-cbaaf9458b392316.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vah.png"></p>
<h3 id="Customize-Data-View"><a href="#Customize-Data-View" class="headerlink" title="Customize Data View"></a>Customize Data View</h3><p>我们还可以定制显示形式，这对于查看比较复杂的数据很有帮助，方法如上，右键选择 Customize Data View，然后如下图般做一些配置，就可以更直观的看到我们关注的信息了。我修改了渲染一个节点时的表达式，所以显示的是 5 。 Siva 演讲的时候修改的是 expanding a node 的表达式，这是错的，默认就好。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-f5c63f5831002485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cdv.png"></p>
<h3 id="Evaluate-Expression"><a href="#Evaluate-Expression" class="headerlink" title="Evaluate Expression"></a>Evaluate Expression</h3><p>另外还可以用 Evaluate Expression 来直接观察，它会跟随变化，也是右击进入，或者 alt + f8 。<br><img src="http://upload-images.jianshu.io/upload_images/42817-fb6a7d7212662770.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="e.png"></p>
<h3 id="Break-Point"><a href="#Break-Point" class="headerlink" title="Break Point"></a>Break Point</h3><p>可以在断点上右击，给断点加上生效条件；或者设置断点不是 suspend，而是打印一些信息，ctrl + shift + f8</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-899d238a219d6d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bp.png"></p>
<hr>
<blockquote>
<p>接下来是 Alex Ruiz – 我还以为 Ruiz 是瑞兹大魔王呢…</p>
</blockquote>
<h2 id="Android-导入-jar-aar-module"><a href="#Android-导入-jar-aar-module" class="headerlink" title="Android 导入 jar/aar module"></a>Android 导入 jar/aar module</h2><p>这个比较简单，如图，new module，然后选择 import .JAR/.AAR project，然后一步步操作。<br><img src="http://upload-images.jianshu.io/upload_images/42817-7faf8024455633a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="import.png"></p>
<p>很值得注意的一点是，所有演讲的工程师都喜欢用 <strong>double shift + 关键字</strong> 的方式来完成作业，像上面的新建 module，他们会 <strong>double shift</strong> 调出对话框搜索 <strong>new module</strong> 的方式。十分高效！</p>
<p>new module 导入进来了，你还要做点配置。假设新 module 叫 smart，在 app/build.gradle 的 dependencies 中加入这一行<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile project(<span class="string">':smart'</span>)</div></pre></td></tr></table></figure></p>
<p>另外根目录下的 settings.gradle 中也要 include 进去，大概长这样<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include <span class="string">':app'</span>, <span class="string">':smart'</span></div></pre></td></tr></table></figure></p>
<p>事实上我们完全可以用 Android Studio 自带的工程管理功能自动完成这一任务，直接从工具栏打开 Project Structure，或者 ctrl + alt + shift + s 组合键，操作如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-fa74c23c25af2502.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project.png"></p>
<h2 id="Run-Any-Gradle-Task"><a href="#Run-Any-Gradle-Task" class="headerlink" title="Run Any Gradle Task"></a>Run Any Gradle Task</h2><p>这个 tip 很方便，如下图，打开 gradle project，很多 task —— 如果没有点击同步一下，双击就可以运行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-bd54c592a5a3a0c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="task.png"></p>
<h2 id="Build-Variants"><a href="#Build-Variants" class="headerlink" title="Build Variants"></a>Build Variants</h2><p>首先一个技巧是通过 Build Variants 来选择运行时的任务，做过多渠道打包应该遇到过。<br><img src="http://upload-images.jianshu.io/upload_images/42817-bc33e120a314b5a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="variants.png"></p>
<p>另外一个技巧是，重构方法名或者类名时，让 Android Instrumentation Tests 和 Unit Tests 都能够随之一起被重构（默认只有一个是 active 的，project 窗口会高亮选中的 Tests），这需要打开 Android Studio 的一个选项，如下图。这个可能是 2.0 的功能，我在 1.5 上未发现该设置选项。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-e19952297a80e3f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="test.png"></p>
<p>关于两种测试的最大区别从名字上就看的出来，Unit Tests 是 local tests，直接运行在电脑的 JVM 中，而则需要运行在  Android device 或者 emulator 上。更多可参考官方文档：<a href="http://developer.android.com/intl/zh-cn/training/testing/unit-testing/index.html" target="_blank" rel="external">Building Effective Unit Tests</a> 。</p>
<hr>
<blockquote>
<p>这是 Michal Bendowski 的演讲</p>
</blockquote>
<h2 id="Create-Test-Classes"><a href="#Create-Test-Classes" class="headerlink" title="Create Test Classes"></a>Create Test Classes</h2><p>很简单，光标移动到被测试类名上，alt + enter，选择 create test，即可创建，使用组合键 ctrl + shift + t 可以在二者之间来回切换，当然，它还可以用于创建测试类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-fe2c68daad306a05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ct.png"></p>
<p>在 1.5 上创建测试类的时候和 build variants 中的选择有关，但是 Michal 演示的时候不需要担心这个，而且重构的时候也能同时被一起重构，应该是 2.0 的新功能。</p>
<p><del>后面还有 NDK 调试和 CPU 优化调试，有空再说，囧</del></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;冒死总结！有些地方不知道怎么描述，自己动手感受一番吧。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;我只总结了前面五分多钟讲的快捷方式。后面的高级技巧我还在学习中，坑慢慢填。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;已将 Tor Norbye 演讲的编辑技巧补充完。&lt;/p&gt;
&lt;p&gt;再来一波更新~duang~还有最后的 NDK 调试和 CPU 优化调试没总结，有空再说，囧&lt;/p&gt;
&lt;p&gt;补充一点：我的测试环境是 win7 + as 1.5，有错误的地方还请指出，谢谢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天&lt;a href=&quot;http://weibo.com/2491729875/D5vFEdvuC&quot;&gt;@陈启超同学&lt;/a&gt;发了 Android Studio for Experts (Android Dev Summit 2015) 的视频，我也跟着学习了一下。这个视频讲的非常好！做点小结，分享交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Studio" scheme="http://blog.iamwent.cn/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title>打造更好用的 Android Studio：添加 Templates 以及改造 gradle-projects</title>
    <link href="http://blog.iamwent.cn/2015/11/25/android-studio-templates/"/>
    <id>http://blog.iamwent.cn/2015/11/25/android-studio-templates/</id>
    <published>2015-11-25T13:19:30.000Z</published>
    <updated>2017-02-06T03:57:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>对模板工程的改造有可能造成 Android Studio 更新失败！</strong></p>
<p>最近我从 1.5 -&gt; 1.5.1 更新失败，就是对模板工程的改造造成了冲突！</p>
<p>中午 @drakeet 秀了一波他改造的两个小模板，另外还发了几张官方自带模板的本地位置图片，我也跟着改造了一把。</p>
</blockquote>
<h2 id="添加自定义-Templates"><a href="#添加自定义-Templates" class="headerlink" title="添加自定义 Templates"></a>添加自定义 Templates</h2><p>自定义的位置入口在这儿：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-16f180a2841bae45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="edit.png"></p>
<a id="more"></a>
<p>然后，选择 Templates 按 + 就可以一步步操作啦。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-2d11d4bc9c7ce8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="templates.png"></p>
<p>Description 处有些很有用的说明，这里指出了多个占位符号，可以在根据模板类生成具体的类时替换成合适的字符。</p>
<ul>
<li>静态内部类实现的单例。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125;&#123;</div><div class="line">    public static $&#123;NAME&#125; getInstance() &#123;</div><div class="line">        return $&#123;NAME&#125;Holder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private $&#123;NAME&#125;() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private static class $&#123;NAME&#125;Holder &#123;</div><div class="line">        private static final $&#123;NAME&#125; sInstance = new $&#123;NAME&#125;();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>BaseAdapter，引入 provideItemLayout() 方法是为了解决 R 文件引入的包名问题，ViewHolder.bind(Object)  可以将 UI 和数据绑定放在一起。</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.support.annotation.LayoutRes;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.BaseAdapter;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125; extends BaseAdapter &#123;</div><div class="line"></div><div class="line">    private Context ctx;</div><div class="line">    private List&lt;Object&gt; objects;</div><div class="line"></div><div class="line">    public $&#123;NAME&#125;(Context ctx, List&lt;Object&gt; objects) &#123;</div><div class="line">        this.ctx = ctx;</div><div class="line">        this.objects = objects;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private @LayoutRes int provideItemLayout() &#123;</div><div class="line">        // todo</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getCount() &#123;</div><div class="line">        return objects == null ? 0 : objects.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getItem(int position) &#123;</div><div class="line">        return objects.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public long getItemId(int position) &#123;</div><div class="line">        return position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public View getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">        ViewHolder holder;</div><div class="line">        </div><div class="line">        if (convertView == null) &#123;</div><div class="line">            convertView = LayoutInflater.from(ctx).inflate(provideItemLayout(), parent, false);</div><div class="line">            </div><div class="line">            holder = new ViewHolder(convertView);</div><div class="line">            convertView.setTag(holder);</div><div class="line">        &#125; else &#123;</div><div class="line">            holder = (ViewHolder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        holder.bind(objects.get(position));</div><div class="line">        </div><div class="line">        return convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class ViewHolder &#123;</div><div class="line">        </div><div class="line">        public ViewHolder(View convertView) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        public void bind(Object o) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>RecyclerView Adapter</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != "")package $&#123;PACKAGE_NAME&#125;;#end</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.support.annotation.LayoutRes;</div><div class="line">import android.support.v7.widget.RecyclerView;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">#parse("File Header.java")</div><div class="line">public class $&#123;NAME&#125; extends RecyclerView.Adapter&lt;$&#123;NAME&#125;.ViewHolder&gt;  &#123;</div><div class="line"></div><div class="line">    private Context ctx;</div><div class="line">    private List&lt;Object&gt; objects;</div><div class="line"></div><div class="line">    public $&#123;NAME&#125;(Context ctx, List&lt;Object&gt; objects) &#123;</div><div class="line">        this.ctx = ctx;</div><div class="line">        this.objects = objects;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private</div><div class="line">    @LayoutRes</div><div class="line">    int provideItemLayout() &#123;</div><div class="line">        // todo</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</div><div class="line">        View view = LayoutInflater.from(ctx).inflate(provideItemLayout(), parent, false);</div><div class="line">        return new ViewHolder(view);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onBindViewHolder(ViewHolder holder, int position) &#123;</div><div class="line">        holder.bind(objects.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getItemCount() &#123;</div><div class="line">        return objects == null ? 0 : objects.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class ViewHolder extends RecyclerView.ViewHolder &#123;</div><div class="line"></div><div class="line">        public ViewHolder(View itemView) &#123;</div><div class="line">            super(itemView);</div><div class="line">            //todo</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void bind(Object o) &#123;</div><div class="line">            // todo</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="改造-gradle-projects"><a href="#改造-gradle-projects" class="headerlink" title="改造 gradle-projects"></a>改造 gradle-projects</h2><p>在添加了几个自定义的 Templates 之后，我想能不能去改造一下整个 project，让它自动帮我们创建更多的文件、配置更多的内容。</p>
<blockquote>
<p>我曾经想改造一下，但是没有 Google 到方法，然后我创建了一个工程，把必须要的依赖啊、包啊、类啊都配置好，想要以后再新建工程时直接 copy 一份然后修改包名就行了，后来我发现改包名太累，放弃了。</p>
</blockquote>
<p>以下就是手术过程。</p>
<h3 id="找到模板工程位置："><a href="#找到模板工程位置：" class="headerlink" title="找到模板工程位置："></a>找到模板工程位置：</h3><p><strong>AndroidStudio\plugins\android\lib\templates\gradle-projects</strong></p>
<p>这个下面有多个文件夹，一看名字就知道是干啥的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/42817-644b83e89aad25b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="projects.png"></p>
<p>###<strong>改造前请先备份！</strong></p>
<p>##<strong>改造前请先备份！</strong></p>
<p>#<strong>改造前请先备份！</strong><br></p><p></p>
<h4 id="先看-NewAndroidProject-有什么可以改造的没有"><a href="#先看-NewAndroidProject-有什么可以改造的没有" class="headerlink" title="先看 NewAndroidProject 有什么可以改造的没有"></a>先看 NewAndroidProject 有什么可以改造的没有</h4><p>研究了一下这个目录下的文件，我发现最重要的是<code>recipe.xml.ftl</code> 这个文件，它描述了工程创建过程应该做些什么，copy 操作是简单的复制，instantiate 操作是实例化，AS 除了生成一些变量替换掉占位符，还会插入一些内容。<code>globals.xml.ftl</code> 则定义了一些常量。据此，我们可以修改的文件是<br> <code>NewAndroidProject\root\project_ignore</code> 和 <code>NewAndroidProject\root\local.properties.ftl</code>，前者是整个工程的 ignore 文件，可以在 <a href="https://www.gitignore.io" target="_blank" rel="external">https://www.gitignore.io</a> 生成一份拷贝进去，后者我们可以定义一些密码之类的（要确保该文件不会加入版本控制系统）。</p>
<h3 id="接下来看看-NewAndroidModule-有什么可以改造的没有"><a href="#接下来看看-NewAndroidModule-有什么可以改造的没有" class="headerlink" title="接下来看看 NewAndroidModule 有什么可以改造的没有"></a>接下来看看 NewAndroidModule 有什么可以改造的没有</h3><p>根据前面的经验，先研究一下 <code>recipe.xml.ftl</code> 这个文件，有以下发现：</p>
<ol>
<li>第 4 行的 dependency 定义 appcompat-v7</li>
<li>第 14 行实例化了 build.gradle</li>
<li>第 19 行创建了 drawable 文件夹</li>
<li>第 33 行拷贝了 module 的 ignore</li>
<li>第 37 行生成了 proguard 文件</li>
<li>第 55 行生成了 res/value/strings.xml</li>
</ol>
<p>继续研究 <code>NewAndroidModule\root</code> 下的文件。</p>
<ol>
<li>build.gradle.ftl 是 module 的 build.gradle 模板，我想提前做点配置进去。我比较疑惑的是第 65 行的 <code>&lt;#if dependencyList?? &gt;</code> ，这里看起来是某个地方定义了一个依赖列表，但是并没有发现。回过头去看 <code>recipe.xml.ftl</code> ，它的第 4 行是 <code>&lt;dependency mavenUrl=&quot;com.android.support:appcompat-v7:${buildApi}.+&quot;/&gt;</code> ，我猜测可能这就是定义的地方，于是在这后面仿写了一句 <code>&lt;dependency mavenUrl=&quot;com.jakewharton:butterknife:7.0.1&quot;/&gt;</code> ，创建工程验证确实如我所猜测的那样。</li>
<li>module_ignore 最简单，根据我们的需要再添加一些语句就行</li>
<li>proguard-rules.txt.ftl 会被实例化到 proguard-rules.pro，可以根据对 <code>build.gradle.ftl</code> 的修改适当修改</li>
</ol>
<p>还可以继续改造的是：自动生成一些包，让程序架构更清晰，先把架子搭起来嘛。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.jetbrains.com/help/idea/2016.2/file-and-code-templates.html" target="_blank" rel="external">File and Code Templates</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21301904#tipjar" target="_blank" rel="external">使用FreeMarker模板引擎自定义Android工程模板</a></li>
<li><a href="https://github.com/gabrielemariotti/AndroidStudioTemplate" target="_blank" rel="external">AndroidStudioTemplate</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对模板工程的改造有可能造成 Android Studio 更新失败！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近我从 1.5 -&amp;gt; 1.5.1 更新失败，就是对模板工程的改造造成了冲突！&lt;/p&gt;
&lt;p&gt;中午 @drakeet 秀了一波他改造的两个小模板，另外还发了几张官方自带模板的本地位置图片，我也跟着改造了一把。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;添加自定义-Templates&quot;&gt;&lt;a href=&quot;#添加自定义-Templates&quot; class=&quot;headerlink&quot; title=&quot;添加自定义 Templates&quot;&gt;&lt;/a&gt;添加自定义 Templates&lt;/h2&gt;&lt;p&gt;自定义的位置入口在这儿：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/42817-16f180a2841bae45.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;edit.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android Studio" scheme="http://blog.iamwent.cn/tags/Android-Studio/"/>
    
  </entry>
  
</feed>
